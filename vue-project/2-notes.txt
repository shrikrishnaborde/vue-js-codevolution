1. Propert binding

<script>

  export default {
    name : "App",
    data(){
      return{
        name: "Shrikrishna"
      }
    }
  }
</script>

<template>
  <div>Hello {{ name }}</div>
</template>

we can also use v-text directive for text interpolltaion

<script>

  export default {
    name : "App",
    data(){
      return{
        name: "Batman",
        greet: "Hello",
        channel: "codeevoluation"
      }
    }
  }
</script>

<template>
  <div>{{greet}} {{ name }}</div>
  <div v-text="channel"></div>
</template>

only drawback for v-text is it replaces the entire text
in the tag while mustache {{}} can do partial rendering.


3.v-html

renders html in a tag
<script>

  export default {
    name : "App",
    data(){
      return{
        name: "Batman",
        greet: "Hello",
        channel: "<b>codeevoluation</b>"
      }
    }
  }
</script>

<template>
  <div>{{greet}} {{ name }}</div>
  <div v-html="channel"></div>
</template>

4. v-bind

v-bind directive is used to bind to the attributes
like id etc

<script>

  export default {
    name : "App",
    data(){
      return{
        headingId:"heading",
        isDisabled: true
      }
    }
  }
</script>

<template>
  <h2 v-bind:id="headingId">Heading</h2>
   <button v-bind:disabled="isDisabled">Button</button>
</template>


we can also use v-bind to apply dynamic class

<script>

  export default {
    name : "App",
    data(){
      return{
        className: 'danger'
      }
    }
  }
</script>

<template>
  <h2 v-bind:class="className">Underlined text</h2>
</template>

if we want to apply class on a condition, we can use v-bind
<script>

  export default {
    name : "App",
    data(){
      return{
        isPromoted: true,
        isSoldOut: true
      }
    }
  }
</script>

<template>
  <h2 v-bind:class="isPromoted && 'promoted'">Promoted movie</h2>
  <h2 v-bind:class="isSoldOut ? 'soldOut': 'new'">Sold Out ?</h2>
  <h2 v-bind:class="['new','promoted']">Newly Promoted Movie</h2>
  <h2 v-bind:class="[isPromoted && 'promoted', isSoldOut ? 'soldOut': 'new']">Array conditional movie</h2>
  <h2 v-bind:class="{
    promoted: isPromoted,
    new: !isPromoted,
    soldOut: isSoldOut
  }">Object conditional movies</h2>
</template>

<style>
.promoted {
  font-style: italic;
}

.soldOut {
  color: red;
}

.new {
  color: green;
}

</style>


5. v-bind: style

we can use v-bind to apply conditional inline styling

<script>

  export default {
    name : "App",
    data(){
      return{
        highlightColor: 'blue',
        headerSize : 50,
        headerStyleObject: {color: 'orange', 'font-size': '20px', padding: '20px'}
      }
    }
  }
</script>

<template>
  <h2 v-bind:style="{color: highlightColor}">Inline Style</h2>
   <h2 v-bind:style="{color: highlightColor, 'font-size': headerSize + 'px', padding: '20px'}">Inline Style</h2>
  <h2 v-bind:style="headerStyleObject">Inline Style with data</h2>
</template>

we can also apply multiple style objects to the tag

<script>

  export default {
    name : "App",
    data(){
      return{
        headerStyleObject: {color: 'orange', 'font-size': '20px', padding: '20px'}
      }
    }
  }
</script>

<template>
   <h2 v-bind:style="[headerStyleObject,baseStyleObject]">Multiple styles object</h2>
</template>


we can use attribute binding without using v-bind

<template>
  <div>{{greet}} {{ name }}</div>
  <div v-html="channel"></div>
  <h2 :id="headingId">Heading</h2>
  <button :disabled="isDisabled">Button</button>
  <h2 class="underline" :class="className">Underlined text</h2>
  <h2 :class="isPromoted && 'promoted'">Promoted movie</h2>
  <h2 :class="isSoldOut ? 'soldOut': 'new'">Sold Out ?</h2>
  <h2 :class="['new','promoted']">Newly Promoted Movie</h2>
  <h2 :class="[isPromoted && 'promoted', isSoldOut ? 'soldOut': 'new']">Array conditional movie</h2>
  <h2 :class="{
    promoted: isPromoted,
    new: !isPromoted,
    soldOut: isSoldOut
  }">Object conditional movies</h2>

  <h2 v-bind:style="{color: highlightColor, 'font-size': headerSize + 'px', padding: '20px'}">Inline Style</h2>
  <h2 v-bind:style="headerStyleObject">Inline Style with data</h2>
  <h2 v-bind:style="[headerStyleObject,baseStyleObject]">Multiple styles object</h2>
</template>

<style>

